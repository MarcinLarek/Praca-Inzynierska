using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using Random = UnityEngine.Random;

public class ClassAbilities : MonoBehaviour
{
    private string abilityOneName;
    private string abilityTwoName;
    private string abilityThreeName;

    public GameObject abilityOneButton;
    public GameObject abilityTwoButton;
    public GameObject abilityThreeButton;

    private CharacterStats characterStats;

    private void Awake()
    {
        abilityOneButton = GameObject.Find("Ability 1");
        abilityTwoButton = GameObject.Find("Ability 2");
        abilityThreeButton = GameObject.Find("Ability 3");
        characterStats = this.gameObject.GetComponent<CharacterStats>();
    }

    //Zanim ktos bedzie na mnie krzyczec.
    //Lepszego pomyslu nie mam poki co.
    //Poki co jest limit na 3 mozliwe abilitki ale teoretycznie da sie to rozbudowac.
    //Problem w tym ze mi sie nie chce. Feel free to try.
    //Ale ok, do rzeczy. Dajemy do funkcji nazwe klasy obecnie aktwynej postaci i numer przycisku ktory zostal klikniety
    //Nastepnie przechodzimy switchami przez wszystkie klasy postaci i numery abilitek az znajdziemy to co nas interesuje
    //Rozwiazanie glupie i zle no ale coz...
    /*
     ?????????????????????????????????????????????
??????????????????????????????????????????????????
??????????????????????????????????????????????????
??????????????????????????????????????????????????
??????????????????????????????????????????????????
??????????????????????????????????????????????????
??????????????????????????????????????????????????
??????????????????????????????????????????????????
??????????????????????????????????????????????????
??????????????????????????????????????????????????
??????????????????????????????????????????????????
??????????????????????????????????????????????????
??????????????????????????????????????????????????
??????????????????????????????????????????????????
??????????????????????????????????????????????????
??????????????????????????????????????????????????
     */
    public void PrepareButtons(CharacterStats.Classes classtype)
    {
        abilityOneButton = GameObject.Find("Ability 1");
        abilityTwoButton = GameObject.Find("Ability 2");
        abilityThreeButton = GameObject.Find("Ability 3");
        switch (classtype)
        {
            case (CharacterStats.Classes.DMG):
                abilityOneName = "DMG ABILITY 1";
                abilityTwoName = "DMG ABILITY 2";
                abilityThreeName = "DMG ABILITY 3";
                abilityOneButton.GetComponentInChildren<TextMeshProUGUI>().text = abilityOneName;
                abilityTwoButton.GetComponentInChildren<TextMeshProUGUI>().text = abilityTwoName;
                abilityThreeButton.GetComponentInChildren<TextMeshProUGUI>().text = abilityThreeName;
                break;
            case (CharacterStats.Classes.SUPPORT):
                abilityOneName = "Heal Selected";
                abilityTwoName = "Heal All";
                abilityThreeName = "Boost Health";
                abilityOneButton.GetComponentInChildren<TextMeshProUGUI>().text = abilityOneName;
                abilityTwoButton.GetComponentInChildren<TextMeshProUGUI>().text = abilityTwoName;
                abilityThreeButton.GetComponentInChildren<TextMeshProUGUI>().text = abilityThreeName;
                break;
            case(CharacterStats.Classes.TANK):
                abilityOneName = "TANK ABILITY 1";
                abilityTwoName = "TANK ABILITY 2";
                abilityThreeName = "TANK ABILITY 3";
                abilityOneButton.GetComponentInChildren<TextMeshProUGUI>().text = abilityOneName;
                abilityTwoButton.GetComponentInChildren<TextMeshProUGUI>().text = abilityTwoName;
                abilityThreeButton.GetComponentInChildren<TextMeshProUGUI>().text = abilityThreeName;
                break;
            default:
                Debug.Log("Wrong Class");
                break;
        }
    }

    public void AbilityDistributor(CharacterStats.Classes classtype, int abilityNumber)
    {
        switch (classtype)
        {
            case CharacterStats.Classes.SUPPORT:
                switch(abilityNumber)
                {
                    case 1:
                        SupportAbilityOne();
                        break;
                    case 2:
                        break;
                    case 3:
                        break;
                }
                break;
            case CharacterStats.Classes.DMG:
                switch (abilityNumber)
                {
                    case 1:
                        break;
                    case 2:
                        break;
                    case 3:
                        break;
                }
                break;
            case CharacterStats.Classes.TANK:
                switch (abilityNumber)
                {
                    case 1:
                        break;
                    case 2:
                        break;
                    case 3:
                        break;
                }
                break;
        }
    }

    //Heals ally for 1d10 +3 to his maximum HP. AP cost: 3
    private void SupportAbilityOne()
    {
        BattleHandler battlehandler = BattleHandler.GetInstance();

        if (battlehandler.selectedCharacter != null)//Sprawdzamy czy ktos wybrany
        {
            CharacterStats selectescharacter = battlehandler.selectedCharacter.GetComponent<CharacterStats>();
            if(selectescharacter.isplayerteam == true)//Sprawdzamy czy przeciwnik czy swoj
            {
                if(characterStats.actionPoints > 3)//Sprawdzamy ilosc Action Pointow
                {
                    if(selectescharacter.health != selectescharacter.maxHealth)//Sprawdzamy czy nie ma juz max HP
                    {
                        int roll = Random.Range(1, 10);
                        int totalheal = roll + 3;
                        Debug.Log($"{characterStats.name} healing {selectescharacter.name} for 1d10+3  - {roll}- Total roll - {totalheal}");
                        selectescharacter.health += totalheal;
                        if(selectescharacter.health > selectescharacter.maxHealth)//Jesli uleczyliscmy o za duzo, zmniejszamy do limitu.
                        {
                            selectescharacter.health = selectescharacter.maxHealth;
                        }
                        characterStats.actionPoints -= 3;
                    }
                    else
                    {
                        Debug.Log("Alredy at full HP");
                    }
                }
                else
                {
                    Debug.Log("You don't have enought Action Points");
                }
            }
            else
            {
                Debug.Log("Cant heal enemy");
            }
        }
        else
        {
            Debug.Log("Target not selected");
        }

    }
    private void SupportAbilityTwo()
    {

    }
    private void SupportAbilityThree()
    {

    }
}
